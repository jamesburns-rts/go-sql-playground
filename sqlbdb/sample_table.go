// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlbdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SampleTable is an object representing the database table.
type SampleTable struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	IntExample  null.Int    `boil:"int_example" json:"int_example,omitempty" toml:"int_example" yaml:"int_example,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *sampleTableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sampleTableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SampleTableColumns = struct {
	ID          string
	Name        string
	Description string
	IntExample  string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	IntExample:  "int_example",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SampleTableTableColumns = struct {
	ID          string
	Name        string
	Description string
	IntExample  string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "sample_table.id",
	Name:        "sample_table.name",
	Description: "sample_table.description",
	IntExample:  "sample_table.int_example",
	CreatedAt:   "sample_table.created_at",
	UpdatedAt:   "sample_table.updated_at",
	DeletedAt:   "sample_table.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SampleTableWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Description whereHelpernull_String
	IntExample  whereHelpernull_Int
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"test\".\"sample_table\".\"id\""},
	Name:        whereHelperstring{field: "\"test\".\"sample_table\".\"name\""},
	Description: whereHelpernull_String{field: "\"test\".\"sample_table\".\"description\""},
	IntExample:  whereHelpernull_Int{field: "\"test\".\"sample_table\".\"int_example\""},
	CreatedAt:   whereHelpertime_Time{field: "\"test\".\"sample_table\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"test\".\"sample_table\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"test\".\"sample_table\".\"deleted_at\""},
}

// SampleTableRels is where relationship names are stored.
var SampleTableRels = struct {
}{}

// sampleTableR is where relationships are stored.
type sampleTableR struct {
}

// NewStruct creates a new relationship struct
func (*sampleTableR) NewStruct() *sampleTableR {
	return &sampleTableR{}
}

// sampleTableL is where Load methods for each relationship are stored.
type sampleTableL struct{}

var (
	sampleTableAllColumns            = []string{"id", "name", "description", "int_example", "created_at", "updated_at", "deleted_at"}
	sampleTableColumnsWithoutDefault = []string{"name"}
	sampleTableColumnsWithDefault    = []string{"id", "description", "int_example", "created_at", "updated_at", "deleted_at"}
	sampleTablePrimaryKeyColumns     = []string{"id"}
	sampleTableGeneratedColumns      = []string{}
)

type (
	// SampleTableSlice is an alias for a slice of pointers to SampleTable.
	// This should almost always be used instead of []SampleTable.
	SampleTableSlice []*SampleTable
	// SampleTableHook is the signature for custom SampleTable hook methods
	SampleTableHook func(context.Context, boil.ContextExecutor, *SampleTable) error

	sampleTableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sampleTableType                 = reflect.TypeOf(&SampleTable{})
	sampleTableMapping              = queries.MakeStructMapping(sampleTableType)
	sampleTablePrimaryKeyMapping, _ = queries.BindMapping(sampleTableType, sampleTableMapping, sampleTablePrimaryKeyColumns)
	sampleTableInsertCacheMut       sync.RWMutex
	sampleTableInsertCache          = make(map[string]insertCache)
	sampleTableUpdateCacheMut       sync.RWMutex
	sampleTableUpdateCache          = make(map[string]updateCache)
	sampleTableUpsertCacheMut       sync.RWMutex
	sampleTableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sampleTableAfterSelectMu sync.Mutex
var sampleTableAfterSelectHooks []SampleTableHook

var sampleTableBeforeInsertMu sync.Mutex
var sampleTableBeforeInsertHooks []SampleTableHook
var sampleTableAfterInsertMu sync.Mutex
var sampleTableAfterInsertHooks []SampleTableHook

var sampleTableBeforeUpdateMu sync.Mutex
var sampleTableBeforeUpdateHooks []SampleTableHook
var sampleTableAfterUpdateMu sync.Mutex
var sampleTableAfterUpdateHooks []SampleTableHook

var sampleTableBeforeDeleteMu sync.Mutex
var sampleTableBeforeDeleteHooks []SampleTableHook
var sampleTableAfterDeleteMu sync.Mutex
var sampleTableAfterDeleteHooks []SampleTableHook

var sampleTableBeforeUpsertMu sync.Mutex
var sampleTableBeforeUpsertHooks []SampleTableHook
var sampleTableAfterUpsertMu sync.Mutex
var sampleTableAfterUpsertHooks []SampleTableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SampleTable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SampleTable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SampleTable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SampleTable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SampleTable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SampleTable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SampleTable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SampleTable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SampleTable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sampleTableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSampleTableHook registers your hook function for all future operations.
func AddSampleTableHook(hookPoint boil.HookPoint, sampleTableHook SampleTableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sampleTableAfterSelectMu.Lock()
		sampleTableAfterSelectHooks = append(sampleTableAfterSelectHooks, sampleTableHook)
		sampleTableAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sampleTableBeforeInsertMu.Lock()
		sampleTableBeforeInsertHooks = append(sampleTableBeforeInsertHooks, sampleTableHook)
		sampleTableBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sampleTableAfterInsertMu.Lock()
		sampleTableAfterInsertHooks = append(sampleTableAfterInsertHooks, sampleTableHook)
		sampleTableAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sampleTableBeforeUpdateMu.Lock()
		sampleTableBeforeUpdateHooks = append(sampleTableBeforeUpdateHooks, sampleTableHook)
		sampleTableBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sampleTableAfterUpdateMu.Lock()
		sampleTableAfterUpdateHooks = append(sampleTableAfterUpdateHooks, sampleTableHook)
		sampleTableAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sampleTableBeforeDeleteMu.Lock()
		sampleTableBeforeDeleteHooks = append(sampleTableBeforeDeleteHooks, sampleTableHook)
		sampleTableBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sampleTableAfterDeleteMu.Lock()
		sampleTableAfterDeleteHooks = append(sampleTableAfterDeleteHooks, sampleTableHook)
		sampleTableAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sampleTableBeforeUpsertMu.Lock()
		sampleTableBeforeUpsertHooks = append(sampleTableBeforeUpsertHooks, sampleTableHook)
		sampleTableBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sampleTableAfterUpsertMu.Lock()
		sampleTableAfterUpsertHooks = append(sampleTableAfterUpsertHooks, sampleTableHook)
		sampleTableAfterUpsertMu.Unlock()
	}
}

// One returns a single sampleTable record from the query.
func (q sampleTableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SampleTable, error) {
	o := &SampleTable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlbdb: failed to execute a one query for sample_table")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SampleTable records from the query.
func (q sampleTableQuery) All(ctx context.Context, exec boil.ContextExecutor) (SampleTableSlice, error) {
	var o []*SampleTable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlbdb: failed to assign all query results to SampleTable slice")
	}

	if len(sampleTableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SampleTable records in the query.
func (q sampleTableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlbdb: failed to count sample_table rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sampleTableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlbdb: failed to check if sample_table exists")
	}

	return count > 0, nil
}

// SampleTables retrieves all the records using an executor.
func SampleTables(mods ...qm.QueryMod) sampleTableQuery {
	mods = append(mods, qm.From("\"test\".\"sample_table\""), qmhelper.WhereIsNull("\"test\".\"sample_table\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"test\".\"sample_table\".*"})
	}

	return sampleTableQuery{q}
}

// FindSampleTable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSampleTable(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SampleTable, error) {
	sampleTableObj := &SampleTable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"test\".\"sample_table\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sampleTableObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlbdb: unable to select from sample_table")
	}

	if err = sampleTableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sampleTableObj, err
	}

	return sampleTableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SampleTable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlbdb: no sample_table provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleTableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sampleTableInsertCacheMut.RLock()
	cache, cached := sampleTableInsertCache[key]
	sampleTableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sampleTableAllColumns,
			sampleTableColumnsWithDefault,
			sampleTableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sampleTableType, sampleTableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sampleTableType, sampleTableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"test\".\"sample_table\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"test\".\"sample_table\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to insert into sample_table")
	}

	if !cached {
		sampleTableInsertCacheMut.Lock()
		sampleTableInsertCache[key] = cache
		sampleTableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SampleTable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SampleTable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return err
	}
	key := makeCacheKey(columns, nil)
	sampleTableUpdateCacheMut.RLock()
	cache, cached := sampleTableUpdateCache[key]
	sampleTableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sampleTableAllColumns,
			sampleTablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("sqlbdb: unable to update sample_table, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"test\".\"sample_table\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sampleTablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sampleTableType, sampleTableMapping, append(wl, sampleTablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to update sample_table row")
	}

	if !cached {
		sampleTableUpdateCacheMut.Lock()
		sampleTableUpdateCache[key] = cache
		sampleTableUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sampleTableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to update all for sample_table")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SampleTableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("sqlbdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"test\".\"sample_table\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sampleTablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to update all in sampleTable slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SampleTable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlbdb: no sample_table provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sampleTableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sampleTableUpsertCacheMut.RLock()
	cache, cached := sampleTableUpsertCache[key]
	sampleTableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sampleTableAllColumns,
			sampleTableColumnsWithDefault,
			sampleTableColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sampleTableAllColumns,
			sampleTablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlbdb: unable to upsert sample_table, could not build update column list")
		}

		ret := strmangle.SetComplement(sampleTableAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sampleTablePrimaryKeyColumns) == 0 {
				return errors.New("sqlbdb: unable to upsert sample_table, could not build conflict column list")
			}

			conflict = make([]string, len(sampleTablePrimaryKeyColumns))
			copy(conflict, sampleTablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"test\".\"sample_table\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sampleTableType, sampleTableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sampleTableType, sampleTableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to upsert sample_table")
	}

	if !cached {
		sampleTableUpsertCacheMut.Lock()
		sampleTableUpsertCache[key] = cache
		sampleTableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SampleTable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SampleTable) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) error {
	if o == nil {
		return errors.New("sqlbdb: no SampleTable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sampleTablePrimaryKeyMapping)
		sql = "DELETE FROM \"test\".\"sample_table\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"test\".\"sample_table\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(sampleTableType, sampleTableMapping, append(wl, sampleTablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to delete from sample_table")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return err
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q sampleTableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) error {
	if q.Query == nil {
		return errors.New("sqlbdb: no sampleTableQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to delete all from sample_table")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SampleTableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) error {
	if len(o) == 0 {
		return nil
	}

	if len(sampleTableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleTablePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"test\".\"sample_table\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sampleTablePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleTablePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"test\".\"sample_table\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, sampleTablePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to delete all from sampleTable slice")
	}

	if len(sampleTableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SampleTable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSampleTable(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SampleTableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SampleTableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sampleTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"test\".\"sample_table\".* FROM \"test\".\"sample_table\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sampleTablePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlbdb: unable to reload all in SampleTableSlice")
	}

	*o = slice

	return nil
}

// SampleTableExists checks if the SampleTable row exists.
func SampleTableExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"test\".\"sample_table\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlbdb: unable to check if sample_table exists")
	}

	return exists, nil
}

// Exists checks if the SampleTable row exists.
func (o *SampleTable) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SampleTableExists(ctx, exec, o.ID)
}
